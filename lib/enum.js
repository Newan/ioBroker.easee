/*
#define OBSERVATION_SELF_TEST_RESULT  1 // PASSED or error codes [String]
#define OBSERVATION_SELF_TEST_DETAILS  2 // JSON with details from self-test [String]
#define OBSERVATION_WIFI_EVENT  10 // Enum with WiFi event codes. Requires telemetry debug mode. Will be updated on WiFi events when using cellular,  will otherwise be reported in ChargerOfflineReason [Integer]
#define OBSERVATION_CHARGER_OFFLINE_REASON  11 // Enum describing why charger is offline [Integer]
#define OBSERVATION_EASEE_LINK_COMMAND_RESPONSE  13 // Response on a EaseeLink command sent to another devic [Integer]
#define OBSERVATION_EASEE_LINK_DATA_RECEIVED  14 // Data received on EaseeLink from another device [String]
#define OBSERVATION_LOCAL_PRE_AUTHORIZE_ENABLED  15 // Preauthorize with whitelist enabled. Readback on setting [event] [Boolean]
#define OBSERVATION_LOCAL_AUTHORIZE_OFFLINE_ENABLED  16 // Allow offline charging for whitelisted RFID token. Readback on setting [event] [Boolean]
#define OBSERVATION_ALLOW_OFFLINE_TX_FOR_UNKNOWN_ID  17 // Allow offline charging for all RFID tokens. Readback on setting [event] [Boolean]
#define OBSERVATION_ERRATIC_EVMAX_TOGGLES  18 // 0 == erratic checking disabled, otherwise the number of toggles between states Charging and Charging Complate that will trigger an error [Integer]
#define OBSERVATION_BACKPLATE_TYPE  19 // Readback on backplate type [Integer]
#define OBSERVATION_SITE_STRUCTURE  20 // Site Structure [boot] [String]
#define OBSERVATION_DETECTED_POWER_GRID_TYPE  21 // Detected power grid type according to PowerGridType table [boot] [Integer]
#define OBSERVATION_CIRCUIT_MAX_CURRENT_P1  22 // Set circuit maximum current [Amperes] [Double]
#define OBSERVATION_CIRCUIT_MAX_CURRENT_P2  23 // Set circuit maximum current [Amperes] [Double]
#define OBSERVATION_CIRCUIT_MAX_CURRENT_P3  24 // Set circuit maximum current [Amperes] [Double]
#define OBSERVATION_LOCATION  25 // Location coordinate [event] [Position]
#define OBSERVATION_SITE_IDSTRING  26 // Site ID string [event] [String]
#define OBSERVATION_SITE_IDNUMERIC  27 // Site ID numeric value [event] [Integer]
#define OBSERVATION_LOCK_CABLE_PERMANENTLY  30 // Lock type2 cable permanently [Boolean]
#define OBSERVATION_IS_ENABLED  31 // Set true to enable charger, false disables charger [Boolean]
#define OBSERVATION_CIRCUIT_SEQUENCE_NUMBER  33 // Charger sequence number on circuit [Integer]
#define OBSERVATION_SINGLE_PHASE_NUMBER  34 // Phase to use in 1-phase charging [Integer]
#define OBSERVATION_ENABLE3_PHASES_DEPRECATED  35 // Allow charging using 3-phases [Boolean]
#define OBSERVATION_WI_FI_SSID  36 // WiFi SSID name [String]
#define OBSERVATION_ENABLE_IDLE_CURRENT  37 // Charger signals available current when EV is done charging [user option] [event] [Boolean]
#define OBSERVATION_PHASE_MODE  38 // Phase mode on this charger. 1-Locked to 1-Phase, 2-Auto, 3-Locked to 3-phase(only Home) [Integer]
#define OBSERVATION_FORCED_THREE_PHASE_ON_ITWITH_GND_FAULT  39 // Default disabled. Must be set manually if grid type is indeed three phase IT [Boolean]
#define OBSERVATION_LED_STRIP_BRIGHTNESS  40 // LED strip brightness, 0-100% [Integer]
#define OBSERVATION_LOCAL_AUTHORIZATION_REQUIRED  41 // Local RFID authorization is required for charging [user options] [event] [Boolean]
#define OBSERVATION_AUTHORIZATION_REQUIRED  42 // Authorization is requried for charging [Boolean]
#define OBSERVATION_REMOTE_START_REQUIRED  43 // Remote start required flag [event] [Boolean]
#define OBSERVATION_SMART_BUTTON_ENABLED  44 // Smart button is enabled [Boolean]
#define OBSERVATION_OFFLINE_CHARGING_MODE  45 // Charger behavior when offline [Integer]
#define OBSERVATION_LEDMODE  46 // Charger LED mode [event] [Integer]
#define OBSERVATION_MAX_CHARGER_CURRENT  47 // Max current this charger is allowed to offer to car (A). Non volatile. [Double]
#define OBSERVATION_DYNAMIC_CHARGER_CURRENT  48 // Max current this charger is allowed to offer to car (A). Volatile [Double]
#define OBSERVATION_MAX_CURRENT_OFFLINE_FALLBACK_P1  50 // Maximum circuit current P1 when offline [event] [Integer]
#define OBSERVATION_MAX_CURRENT_OFFLINE_FALLBACK_P2  51 // Maximum circuit current P2 when offline [event] [Integer]
#define OBSERVATION_MAX_CURRENT_OFFLINE_FALLBACK_P3  52 // Maximum circuit current P3 when offline [event] [Integer]
#define OBSERVATION_CHARGING_SCHEDULE  62 // Charging schedule [json] [String]
#define OBSERVATION_PAIRED_EQUALIZER  65 // Paired equalizer details [String]
#define OBSERVATION_WI_FI_APENABLED  68 // True if WiFi Access Point is enabled, otherwise false [Boolean]
#define OBSERVATION_PAIRED_USER_IDTOKEN  69 // Observed user token when charger put in RFID pairing mode [event] [String]
#define OBSERVATION_CIRCUIT_TOTAL_ALLOCATED_PHASE_CONDUCTOR_CURRENT_L1  70 // Total current allocated to L1 by all chargers on the circuit. Sent in by master only [Double]
#define OBSERVATION_CIRCUIT_TOTAL_ALLOCATED_PHASE_CONDUCTOR_CURRENT_L2  71 // Total current allocated to L2 by all chargers on the circuit. Sent in by master only [Double]
#define OBSERVATION_CIRCUIT_TOTAL_ALLOCATED_PHASE_CONDUCTOR_CURRENT_L3  72 // Total current allocated to L3 by all chargers on the circuit. Sent in by master only [Double]
#define OBSERVATION_CIRCUIT_TOTAL_PHASE_CONDUCTOR_CURRENT_L1  73 // Total current in L1 (sum of all chargers on the circuit) Sent in by master only [Double]
#define OBSERVATION_CIRCUIT_TOTAL_PHASE_CONDUCTOR_CURRENT_L2  74 // Total current in L2 (sum of all chargers on the circuit) Sent in by master only [Double]
#define OBSERVATION_CIRCUIT_TOTAL_PHASE_CONDUCTOR_CURRENT_L3  75 // Total current in L3 (sum of all chargers on the circuit) Sent in by master only [Double]
#define OBSERVATION_NUMBER_OF_CARS_CONNECTED  76 // Number of cars connected to this circuit [Integer]
#define OBSERVATION_NUMBER_OF_CARS_CHARGING  77 // Number of cars currently charging [Integer]
#define OBSERVATION_NUMBER_OF_CARS_IN_QUEUE  78 // Number of cars currently in queue, waiting to be allocated power [Integer]
#define OBSERVATION_NUMBER_OF_CARS_FULLY_CHARGED  79 // Number of cars that appear to be fully charged [Integer]
#define OBSERVATION_SOFTWARE_RELEASE  80 // Embedded software package release id [boot] [Integer]
#define OBSERVATION_ICCID  81 // SIM integrated circuit card identifier [String]
#define OBSERVATION_MODEM_FW_ID  82 // Modem firmware version [String]
#define OBSERVATION_OTAERROR_CODE  83 // OTA error code, see table [event] [Integer]
#define OBSERVATION_MOBILE_NETWORK_OPERATOR  84 // Current mobile network operator [pollable] [String]
#define OBSERVATION_REBOOT_REASON  89 // Reason of reboot. Bitmask of flags. [Integer]
#define OBSERVATION_POWER_PCBVERSION  90 // Power PCB hardware version [Integer]
#define OBSERVATION_COM_PCBVERSION  91 // Communication PCB hardware version [Integer]
#define OBSERVATION_REASON_FOR_NO_CURRENT  96 // Enum describing why a charger with a car connected is not offering current to the car [Integer]
#define OBSERVATION_LOAD_BALANCING_NUMBER_OF_CONNECTED_CHARGERS  97 // Number of connected chargers in the load balancin. Including the master. Sent from Master only. [Integer]
#define OBSERVATION_UDPNUM_OF_CONNECTED_NODES  98 // Number of chargers connected to master through UDP / WIFI [Integer]
#define OBSERVATION_LOCAL_CONNECTION  99 // Slaves only. Current connection to master, 0 = None, 1= Radio, 2 = WIFI UDP, 3 = Radio and WIFI UDP [Integer]
#define OBSERVATION_PILOT_MODE  100 // Pilot Mode Letter (A-F) [event] [String]
#define OBSERVATION_CAR_CONNECTED_DEPRECATED  101 // Car connection state [Boolean]
#define OBSERVATION_SMART_CHARGING  102 // Smart charging state enabled by capacitive touch button [event] [Boolean]
#define OBSERVATION_CABLE_LOCKED  103 // Cable lock state [event] [Boolean]
#define OBSERVATION_CABLE_RATING  104 // Cable rating read [Amperes] [event] [Double]
#define OBSERVATION_PILOT_HIGH  105 // Pilot signal high [Volt] [debug] [Double]
#define OBSERVATION_PILOT_LOW  106 // Pilot signal low [Volt] [debug] [Double]
#define OBSERVATION_BACK_PLATE_ID  107 // Back Plate RFID of charger [boot] [String]
#define OBSERVATION_USER_IDTOKEN_REVERSED  108 // User ID token string from RFID reading [event] (NB! Must reverse these strings) [String]
#define OBSERVATION_CHARGER_OP_MODE  109 // Charger operation mode according to charger mode table [event] [Integer]
#define OBSERVATION_OUTPUT_PHASE  110 // Active output phase(s) to EV according to output phase type table. [event] [Integer]
#define OBSERVATION_DYNAMIC_CIRCUIT_CURRENT_P1  111 // Dynamically set circuit maximum current for phase 1 [Amperes] [event] [Double]
#define OBSERVATION_DYNAMIC_CIRCUIT_CURRENT_P2  112 // Dynamically set circuit maximum current for phase 2 [Amperes] [event] [Double]
#define OBSERVATION_DYNAMIC_CIRCUIT_CURRENT_P3  113 // Dynamically set circuit maximum current for phase 3 [Amperes] [event] [Double]
#define OBSERVATION_OUTPUT_CURRENT  114 // Available current signaled to car with pilot tone [Double]
#define OBSERVATION_DERATED_CURRENT  115 // Available current after derating [A] [Double]
#define OBSERVATION_DERATING_ACTIVE  116 // Available current is limited by the charger due to high temperature [event] [Boolean]
#define OBSERVATION_DEBUG_STRING  117 // Debug string [String]
#define OBSERVATION_ERROR_STRING  118 // Descriptive error string [event] [String]
#define OBSERVATION_ERROR_CODE  119 // Error code according to error code table [event] [Integer]
#define OBSERVATION_TOTAL_POWER  120 // Total power [kW] [telemetry] [Double]
#define OBSERVATION_SESSION_ENERGY  121 // Session accumulated energy [kWh] [telemetry] [Double]
#define OBSERVATION_ENERGY_PER_HOUR  122 // Accumulated energy per hour [kWh] [event] [Double]
#define OBSERVATION_LEGACY_EV_STATUS  123 // 0 = not legacy ev, 1 = legacy ev detected, 2 = reviving ev [Integer]
#define OBSERVATION_LIFETIME_ENERGY  124 // Accumulated energy in the lifetime of the charger [kWh] [Double]
#define OBSERVATION_LIFETIME_RELAY_SWITCHES  125 // Total number of relay switches in the lifetime of the charger (irrespective of the number of phases used) [Integer]
#define OBSERVATION_LIFETIME_HOURS  126 // Total number of hours in operation [Integer]
#define OBSERVATION_DYNAMIC_CURRENT_OFFLINE_FALLBACK_DEPRICATED  127 // Maximum circuit current when offline [event] [Integer]
#define OBSERVATION_USER_IDTOKEN  128 // User ID token string from RFID reading [event] [String]
#define OBSERVATION_CHARGING_SESSION  129 // Charging sessions [json] [event] [String]
#define OBSERVATION_CELL_RSSI  130 // Cellular signal strength [dBm] [telemetry] [Integer]
#define OBSERVATION_CELL_RAT  131 // Cellular radio access technology according to RAT table [event] [Integer]
#define OBSERVATION_WI_FI_RSSI  132 // WiFi signal strength [dBm] [telemetry] [Integer]
#define OBSERVATION_CELL_ADDRESS  133 // IP address assigned by cellular network [debug] [String]
#define OBSERVATION_WI_FI_ADDRESS  134 // IP address assigned by WiFi network [debug] [String]
#define OBSERVATION_WI_FI_TYPE  135 // WiFi network type letters (G, N, AC, etc) [debug] [String]
#define OBSERVATION_LOCAL_RSSI  136 // Local radio signal strength [dBm] [telemetry] [Integer]
#define OBSERVATION_MASTER_BACK_PLATE_ID  137 // Back Plate RFID of master [event] [String]
#define OBSERVATION_LOCAL_TX_POWER  138 // Local radio transmission power [dBm] [telemetry] [Integer]
#define OBSERVATION_LOCAL_STATE  139 // Local radio state [event] [String]
#define OBSERVATION_FOUND_WI_FI  140 // List of found WiFi SSID and RSSI values [event] [String]
#define OBSERVATION_CHARGER_RAT  141 // Radio access technology in use: 0 = cellular, 1 = wifi [Integer]
#define OBSERVATION_CELLULAR_INTERFACE_ERROR_COUNT  142 // The number of times since boot the system has reported an error on this interface [poll] [Integer]
#define OBSERVATION_CELLULAR_INTERFACE_RESET_COUNT  143 // The number of times since boot the interface was reset due to high error count [poll] [Integer]
#define OBSERVATION_WIFI_INTERFACE_ERROR_COUNT  144 // The number of times since boot the system has reported an error on this interface [poll] [Integer]
#define OBSERVATION_WIFI_INTERFACE_RESET_COUNT  145 // The number of times since boot the interface was reset due to high error count [poll] [Integer]
#define OBSERVATION_LOCAL_NODE_TYPE  146 // 0-Unconfigured, 1-Master, 2-Extender, 3-End device [Integer]
#define OBSERVATION_LOCAL_RADIO_CHANNEL  147 // Channel nr 0 - 11 [Integer]
#define OBSERVATION_LOCAL_SHORT_ADDRESS  148 // Address of charger on local radio network [Integer]
#define OBSERVATION_LOCAL_PARENT_ADDR_OR_NUM_OF_NODES  149 // If master-Number of slaves connected, If slave- Address parent [Integer]
#define OBSERVATION_TEMP_MAX  150 // Maximum temperature for all sensors [Celsius] [telemetry] [Double]
#define OBSERVATION_TEMP_AMBIENT_POWER_BOARD  151 // Temperature measured by ambient sensor on power board [Celsius] [event] [Double]
#define OBSERVATION_TEMP_INPUT_T2  152 // Temperature at input T2 [Celsius] [event] [Double]
#define OBSERVATION_TEMP_INPUT_T3  153 // Temperature at input T3 [Celsius] [event] [Double]
#define OBSERVATION_TEMP_INPUT_T4  154 // Temperature at input T4 [Celsius] [event] [Double]
#define OBSERVATION_TEMP_INPUT_T5  155 // Temperature at input T5 [Celsius] [event] [Double]
#define OBSERVATION_TEMP_OUTPUT_N  160 // Temperature at type 2 connector plug for N [Celsius] [event] [Double]
#define OBSERVATION_TEMP_OUTPUT_L1  161 // Temperature at type 2 connector plug for L1 [Celsius] [event] [Double]
#define OBSERVATION_TEMP_OUTPUT_L2  162 // Temperature at type 2 connector plug for L2 [Celsius] [event] [Double]
#define OBSERVATION_TEMP_OUTPUT_L3  163 // Temperature at type 2 connector plug for L3 [Celsius] [event] [Double]
#define OBSERVATION_TEMP_AMBIENT  170 // Ambient temperature [Celsius] [event] [Double]
#define OBSERVATION_LIGHT_AMBIENT  171 // Ambient light from front side [Percent] [debug] [Integer]
#define OBSERVATION_INT_REL_HUMIDITY  172 // Internal relative humidity [Percent] [event] [Integer]
#define OBSERVATION_BACK_PLATE_LOCKED  173 // Back plate confirmed locked [event] [Boolean]
#define OBSERVATION_CURRENT_MOTOR  174 // Motor current draw [debug] [Double]
#define OBSERVATION_BACK_PLATE_HALL_SENSOR  175 // Raw sensor value [mV] [Integer]
#define OBSERVATION_IN_CURRENT_T2  182 // Calculated current RMS for input T2 [Amperes] [telemetry] [Double]
#define OBSERVATION_IN_CURRENT_T3  183 // Current RMS for input T3 [Amperes] [telemetry] [Double]
#define OBSERVATION_IN_CURRENT_T4  184 // Current RMS for input T4 [Amperes] [telemetry] [Double]
#define OBSERVATION_IN_CURRENT_T5  185 // Current RMS for input T5 [Amperes] [telemetry] [Double]
#define OBSERVATION_IN_VOLT_T1_T2  190 // Input voltage RMS between T1 and T2 [Volt] [telemetry] [Double]
#define OBSERVATION_IN_VOLT_T1_T3  191 // Input voltage RMS between T1 and T3 [Volt] [telemetry] [Double]
#define OBSERVATION_IN_VOLT_T1_T4  192 // Input voltage RMS between T1 and T4 [Volt] [telemetry] [Double]
#define OBSERVATION_IN_VOLT_T1_T5  193 // Input voltage RMS between T1 and T5 [Volt] [telemetry] [Double]
#define OBSERVATION_IN_VOLT_T2_T3  194 // Input voltage RMS between T2 and T3 [Volt] [telemetry] [Double]
#define OBSERVATION_IN_VOLT_T2_T4  195 // Input voltage RMS between T2 and T4 [Volt] [telemetry] [Double]
#define OBSERVATION_IN_VOLT_T2_T5  196 // Input voltage RMS between T2 and T5 [Volt] [telemetry] [Double]
#define OBSERVATION_IN_VOLT_T3_T4  197 // Input voltage RMS between T3 and T4 [Volt] [telemetry] [Double]
#define OBSERVATION_IN_VOLT_T3_T5  198 // Input voltage RMS between T3 and T5 [Volt] [telemetry] [Double]
#define OBSERVATION_IN_VOLT_T4_T5  199 // Input voltage RMS between T4 and T5 [Volt] [telemetry] [Double]
#define OBSERVATION_OUT_VOLT_PIN1_2  202 // Output voltage RMS between type 2 pin 1 and 2 [Volt] [telemetry] [Double]
#define OBSERVATION_OUT_VOLT_PIN1_3  203 // Output voltage RMS between type 2 pin 1 and 3 [Volt] [telemetry] [Double]
#define OBSERVATION_OUT_VOLT_PIN1_4  204 // Output voltage RMS between type 2 pin 1 and 4 [Volt] [telemetry] [Double]
#define OBSERVATION_OUT_VOLT_PIN1_5  205 // Output voltage RMS between type 2 pin 1 and 5 [Volt] [telemetry] [Double]
#define OBSERVATION_VOLT_LEVEL33  210 // 3.3 Volt Level [Volt] [telemetry] [Double]
#define OBSERVATION_VOLT_LEVEL5  211 // 5 Volt Level [Volt] [telemetry] [Double]
#define OBSERVATION_VOLT_LEVEL12  212 // 12 Volt Level [Volt] [telemetry] [Double]
#define OBSERVATION_LTE_RSRP  220 // Reference Signal Received Power (LTE) [-144 .. -44 dBm] [Integer]
#define OBSERVATION_LTE_SINR  221 // Signal to Interference plus Noise Ratio (LTE) [-20 .. +30 dB] [Integer]
#define OBSERVATION_LTE_RSRQ  222 // Reference Signal Received Quality (LTE) [-19 .. -3 dB] [Integer]
#define OBSERVATION_EQ_AVAILABLE_CURRENT_P1  230 // Available current for charging on P1 according to Equalizer [Double]
#define OBSERVATION_EQ_AVAILABLE_CURRENT_P2  231 // Available current for charging on P2 according to Equalizer [Double]
#define OBSERVATION_EQ_AVAILABLE_CURRENT_P3  232 // Available current for charging on P3 according to Equalizer [Double]
#define OBSERVATION_LISTEN_TO_CONTROL_PULSE  56 // True = charger needs control pulse to consider itself online. Readback on charger setting [event] [Boolean]
#define OBSERVATION_CONTROL_PULSE_RTT  57 // Control pulse round-trip time in milliseconds [Integer]
/*
 * Settings Section
 */
/*
#define SETTING_PRODUCT_CODE  1 //  [Integer]
#define SETTING_DIAGNOSTICS_MODE  2 //  [Integer]
#define SETTING_PULSE_INTERVAL_SEC  3 //  [Integer]
#define SETTING_REPORT_INTERVAL_CELL_SEC  4 //  [Integer]
#define SETTING_REPORT_INTERVAL_WI_FI_SEC  5 //  [Integer]
#define SETTING_SMART_BUTTON_ENABLED  6 //  [Boolean]
#define SETTING_ALLOW_UNENCRYPTED_WIFI_CONNECTIONS  7 //  [Boolean]
#define SETTING_PIN_CODE  10 //  [String]
#define SETTING_LOCAL_PRE_AUTHORIZE_ENABLED  15 //  [Boolean]
#define SETTING_LOCAL_AUTHORIZE_OFFLINE_ENABLED  16 //  [Boolean]
#define SETTING_ALLOW_OFFLINE_TX_FOR_UNKNOWN_ID  17 //  [Boolean]
#define SETTING_OFFLINE_CHARGING_MODE  30 //  [Integer]
#define SETTING_AUTHORIZATION_REQUIRED  31 //  [Boolean]
#define SETTING_REMOTE_START_REQUIRED  32 //  [Boolean]
#define SETTING_NETWORK_SEQUENCE  39 //  [Integer]
/*
 * Pulses Section
 */
/*
#define PULSE_DEVICE_PULSE  0 // Device Pulse [undefined]
#define PULSE_MASTERLOOP  1 // Masterloop Pulse [undefined]
#define PULSE_CONTROL  2 // Control Pulse [undefined]
/*
 * Commands Section
 */
/*
#define COMMAND_REBOOT  1 // Reboot charger [undefined]
#define COMMAND_POLL_SINGLE  2 // Poll single observation [undefined]
#define COMMAND_POLL_SINGLE_ARG_OBS_ID 1 //ObsId [Integer]
#define COMMAND_POLL_ALL  3 // Poll all observations [undefined]
#define COMMAND_UPGRADE_FIRMWARE  4 // Upgrade firmware to the latest version using delta OTA [undefined]
#define COMMAND_DOWNLOAD_SETTINGS  5 // Download settings [undefined]
#define COMMAND_SET_FIRMWARE  6 // Set specific OTA firmware release [undefined]
#define COMMAND_SET_FIRMWARE_ARG_RELEASE_ID 1 //ReleaseId [Integer]
#define COMMAND_SCAN_WI_FI  7 // Returns WiFi SSIDs with RSSI value [undefined]
#define COMMAND_SCAN_WI_FI_ARG_TIMEOUT_S 1 //Timeout [s] [Integer]
#define COMMAND_SET_WI_FI_CONFIG_UNSUPPORTED  8 // Configure WiFi connection [undefined]
#define COMMAND_SET_WI_FI_CONFIG_UNSUPPORTED_ARG_SSID 1 //SSID [String]
#define COMMAND_SET_WI_FI_CONFIG_UNSUPPORTED_ARG_PASSWORD 2 //Password [String]
#define COMMAND_SET_SITE_INFO_UNSUPPORTED  9 // Remotely set back plate info [undefined]
#define COMMAND_SET_SITE_INFO_UNSUPPORTED_ARG_SITE_STRUCTURE 1 //SiteStructure [String]
#define COMMAND_SET_SITE_INFO_UNSUPPORTED_ARG_CIRCUIT_SEQUENCE_NUMBER 2 //CircuitSequenceNumber [Integer]
#define COMMAND_SET_REMOTE_START_REQUIRED_DEPRECATED  10 // Sets remote start required flag [undefined]
#define COMMAND_SET_REMOTE_START_REQUIRED_DEPRECATED_ARG_REMOTE_START 1 //RemoteStart [Boolean]
#define COMMAND_SET_SMART_CHARGING  11 // Set smart charging mode [undefined]
#define COMMAND_SET_SMART_CHARGING_ARG_SMART_CHARGING 1 //SmartCharging [Boolean]
#define COMMAND_SET_SMART_BUTTON_ENABLED_DEPRECATED  12 // Set smart button enabled (can toggle smart mode/normal mode) [undefined]
#define COMMAND_SET_SMART_BUTTON_ENABLED_DEPRECATED_ARG_SMART_BUTTON_ENABLE 1 //SmartButtonEnable [Boolean]
#define COMMAND_SET_FIRMWARE_ADVANCED  13 // Enables advanced options for setting firmware [undefined]
#define COMMAND_SET_FIRMWARE_ADVANCED_ARG_RELEASE_ID 1 //ReleaseId [Integer]
#define COMMAND_SET_FIRMWARE_ADVANCED_ARG_FORCE_NO_DELTA 2 //ForceNoDelta [Boolean]
#define COMMAND_SET_FIRMWARE_ADVANCED_ARG_USE_BACKUP_OTASYSTEM 3 //UseBackupOTASystem [Boolean]
#define COMMAND_SEND_EASEE_LINK_COMMAND  14 // Send a command to another device on same circuit using EaseeLink RF/WiFi [undefined]
#define COMMAND_SEND_EASEE_LINK_COMMAND_ARG_TARGET_ID 1 //TargetID [String]
#define COMMAND_SEND_EASEE_LINK_COMMAND_ARG_COMMAND 2 //Command [Integer]
#define COMMAND_SEND_EASEE_LINK_COMMAND_ARG_DATA 3 //Data [String]
#define COMMAND_SEND_EASEE_LINK_COMMAND_ARG_DATA_2 4 //Data_2 [String]
#define COMMAND_START_CELLULAR_OTA  15 // Start OTA of cellular module [undefined]
#define COMMAND_START_CELLULAR_OTA_ARG_FIRMWARE_URL 1 //FirmwareURL [String]
#define COMMAND_START_SELF_TEST  16 // Start self-test program. Might take a minue or two to complete, depends on network connectivity etc. [undefined]
#define COMMAND_START_SELF_TEST_ARG_FATMODE 1 //FATMode [Boolean]
#define COMMAND_SET_BACKPLATE_TYPE  17 // Set backplate type, e.g. to "production" [undefined]
#define COMMAND_SET_BACKPLATE_TYPE_ARG_BACKPLATE_TYPE 1 //BackplateType [Integer]
#define COMMAND_SET_BACKPLATE_TYPE_ARG_ARG0 2 //Arg0 [Integer]
#define COMMAND_SET_BACKPLATE_TYPE_ARG_ARG1 3 //Arg1 [Integer]
#define COMMAND_SET_ERRATIC_EVMAX_TOGGLES  18 // Set 0 to disable feature. Otherwise set the number of toggles that will trigger an error when state toggles between Charging and Charging Complete [undefined]
#define COMMAND_SET_ERRATIC_EVMAX_TOGGLES_ARG_MAX_TOGGLES_OR_DISABLE_FEATURE 1 //MaxTogglesOrDisableFeature [Integer]
#define COMMAND_SET_DYNAMIC_CURRENT_OFFLINE_FALLBACK  21 // Sets the maximum circuit current to be used by the loadbalancer in case the charger goes offline [Amperes] [undefined]
#define COMMAND_SET_DYNAMIC_CURRENT_OFFLINE_FALLBACK_ARG_MAX_DYNAMIC_CURRENT_P1 1 //MaxDynamicCurrentP1 [Integer]
#define COMMAND_SET_DYNAMIC_CURRENT_OFFLINE_FALLBACK_ARG_MAX_DYNAMIC_CURRENT_P2 2 //MaxDynamicCurrentP2 [Integer]
#define COMMAND_SET_DYNAMIC_CURRENT_OFFLINE_FALLBACK_ARG_MAX_DYNAMIC_CURRENT_P3 3 //MaxDynamicCurrentP3 [Integer]
#define COMMAND_SET_DYNAMIC_CIRCUIT_CURRENT  22 // Set charge current for each phase [Amperes], use 0 for all phases to pause charging (for smart charging / volatile setting) [undefined]
#define COMMAND_SET_DYNAMIC_CIRCUIT_CURRENT_ARG_CURRENT_P1 1 //Current P1 [Double]
#define COMMAND_SET_DYNAMIC_CIRCUIT_CURRENT_ARG_CURRENT_P2 2 //Current P2 [Double]
#define COMMAND_SET_DYNAMIC_CIRCUIT_CURRENT_ARG_CURRENT_P3 3 //Current P3 [Double]
#define COMMAND_ABORT_CHARGING  23 // Open relays immediately [undefined]
#define COMMAND_SET_MAX_CIRCUIT_CURRENT  24 // Non-volatile max current for circuit [Amperes] [undefined]
#define COMMAND_SET_MAX_CIRCUIT_CURRENT_ARG_CURRENT_P1 1 //CurrentP1 [Integer]
#define COMMAND_SET_MAX_CIRCUIT_CURRENT_ARG_CURRENT_P2 2 //CurrentP2 [Integer]
#define COMMAND_SET_MAX_CIRCUIT_CURRENT_ARG_CURRENT_P3 3 //CurrentP3 [Integer]
#define COMMAND_AUTHORIZE_CHARGING  25 // Provide authorization result [undefined]
#define COMMAND_AUTHORIZE_CHARGING_ARG_IDTOKEN 1 //IDToken [String]
#define COMMAND_AUTHORIZE_CHARGING_ARG_STATUS 2 //Status [Integer]
#define COMMAND_DEAUTHORIZE_CHARGING  26 // Deauthorizes charging [undefined]
#define COMMAND_DEAUTHORIZE_CHARGING_ARG_IDTOKEN 1 //IDToken [String]
#define COMMAND_DEAUTHORIZE_CHARGING_ARG_STATUS 2 //Status [Integer]
#define COMMAND_SET_ENABLED  29 // Set true to enable charger [undefined]
#define COMMAND_SET_ENABLED_ARG_IS_ENABLED 1 //IsEnabled [Boolean]
#define COMMAND_SET_LOCK_CABLE_PERMANENTLY  30 // Set cable lock state [undefined]
#define COMMAND_SET_LOCK_CABLE_PERMANENTLY_ARG_LOCKED 1 //Locked [Boolean]
#define COMMAND_PLAY_SOUND_UNSUPPORTED  31 // Play sound effect [undefined]
#define COMMAND_PLAY_SOUND_UNSUPPORTED_ARG_SOUND_ID 1 //SoundId [Integer]
#define COMMAND_PLAY_LIGHTS  32 // Play light effect [undefined]
#define COMMAND_PLAY_LIGHTS_ARG_LIGHT_ID 1 //LightId [Integer]
#define COMMAND_PLAY_LIGHTS_ARG_DURATION_SEC 2 //DurationSec [Integer]
#define COMMAND_SET_LOCAL_AUTHORIZATION_REQUIRED  33 // Require local RFID authorization for charging [undefined]
#define COMMAND_SET_LOCAL_AUTHORIZATION_REQUIRED_ARG_ENABLE 1 //Enable [Boolean]
#define COMMAND_ENABLE_IDLE_CURRENT  34 // Charger signals available current when EV is done charging [undefined]
#define COMMAND_ENABLE_IDLE_CURRENT_ARG_ENABLE 1 //Enable [Boolean]
#define COMMAND_SET_LIMIT_TO_SINGLE_PHASE_CHARGING_DEPRECATED  35 // Charger will only charge on 1 phase even if connected to 3 phase grid [undefined]
#define COMMAND_SET_LIMIT_TO_SINGLE_PHASE_CHARGING_DEPRECATED_ARG_LIMIT_TO_SINGLE_PHASE 1 //LimitToSinglePhase [Boolean]
#define COMMAND_SET_PHASE_MODE  38 // Set Phase mode on this charger. 1-Locked to 1-Phase, 2-Auto, 3-Locked to 3-phase(only Home) [undefined]
#define COMMAND_SET_PHASE_MODE_ARG_PHASE_MODE 1 //PhaseMode [Integer]
#define COMMAND_SET_FORCE_THREE_PHASE_ON_ITWITH_GND_FAULT  39 // Only set to true if grid is actually three phase IT when charger cannot detect due to ground fault. [undefined]
#define COMMAND_SET_FORCE_THREE_PHASE_ON_ITWITH_GND_FAULT_ARG_ENABLE 1 //Enable [Boolean]
#define COMMAND_SET_LED_STRIP_BRIGHTNESS  40 // Set LED strip brightness, 0-100% [undefined]
#define COMMAND_SET_LED_STRIP_BRIGHTNESS_ARG_BRIGHTNESS 1 //Brightness [Integer]
#define COMMAND_SET_AUTHENTICATION_REQURIED_DEPRECATED  42 // Require authentication to start charging [undefined]
#define COMMAND_SET_AUTHENTICATION_REQURIED_DEPRECATED_ARG_AUTHENTICATION_REQUIRED 1 //Authentication Required [Boolean]
#define COMMAND_ADD_KEYS  43 // Add authentication keys to the charger"s whitelist [undefined]
#define COMMAND_ADD_KEYS_ARG_KEYS 1 //Keys [String]
#define COMMAND_CLEAR_KEYS  44 // Remove all keys from the charger"s whitelist [undefined]
#define COMMAND_SET_MAX_CHARGER_CURRENT  47 // Set max charge current for this charger [Amperes]. Non-volatile setting, stored in flash. Should only be used for permanent change to current [undefined]
#define COMMAND_SET_MAX_CHARGER_CURRENT_ARG_CURRENT_AMP 1 //Current(Amp) [Integer]
#define COMMAND_SET_DYNAMIC_CHARGER_CURRENT  48 // Set max charge current for this charger [Amperes], use 0 to pause charging (for smart charging / volatile setting) [undefined]
#define COMMAND_SET_DYNAMIC_CHARGER_CURRENT_ARG_CURRENT_AMP 1 //Current(Amp) [Integer]
#define COMMAND_SET_CIRCUIT_NUMBER  49 // Set circuit number [undefined]
#define COMMAND_SET_CIRCUIT_NUMBER_ARG_CIRCUIT_NUMBER 1 //CircuitNumber [Integer]
#define COMMAND_SET_CIRCUIT_RATED_CURRENT  50 // Set value of fuse in front of charger [Amperes] [undefined]
#define COMMAND_SET_CIRCUIT_RATED_CURRENT_ARG_FUSE_VALUE_AMP 1 //Fuse value (Amp) [Integer]
#define COMMAND_SET_MASTER_BACK_PLATE_ID  51 // Set MasterBackPlateID [undefined]
#define COMMAND_SET_MASTER_BACK_PLATE_ID_ARG_MASTER_BACK_PLATE_ID 1 //MasterBackPlateID [String]
#define COMMAND_SET_SITE_KEY  52 // Set site key [undefined]
#define COMMAND_SET_SITE_KEY_ARG_SITE_KEY 1 //Site Key [String]
#define COMMAND_SET_LOCAL_WIFI  53 // Set local wifi and password [undefined]
#define COMMAND_SET_LOCAL_WIFI_ARG_SSID 1 //SSID [String]
#define COMMAND_SET_LOCAL_WIFI_ARG_PASSWORD 2 //Password [String]
#define COMMAND_SET_CELLULAR_RAT  54 // Set the cellular RAT to use, same as NetworkSequence setting [undefined]
#define COMMAND_SET_CELLULAR_RAT_ARG_RAT 1 //RAT [Integer]
#define COMMAND_RESET_SOCKETS  55 // Reset all socket connections [undefined]
#define COMMAND_RESET_SOCKETS_ARG_CONFIRM 1 //Confirm [Boolean]
#define COMMAND_ADD_SCHEDULE  60 // Add a charging schedule. The schedule must specify stack level. [undefined]
#define COMMAND_ADD_SCHEDULE_ARG_SCHEDULE 1 //Schedule [String]
#define COMMAND_CLEAR_SCHEDULE  61 // Clear charging schedule for given stack level [undefined]
#define COMMAND_CLEAR_SCHEDULE_ARG_STACK_LEVEL 1 //StackLevel [Integer]
#define COMMAND_GET_SCHEDULE  62 // Get the charging schedule for the given stack level [undefined]
#define COMMAND_GET_SCHEDULE_ARG_STACK_LEVEL 1 //StackLevel [Integer]
#define COMMAND_OVERRIDE_SCHEDULE  63 // Overrides the schedule for the current session. Output current will not be limited by the schedule. Schedule is automatically resumed when EV disconnects. [undefined]
#define COMMAND_PURGE_SCHEDULE  64 // Erase all schedule content in flash and reset schedule logic [undefined]
#define COMMAND_SET_RFIDPAIRING_MODE  69 // Set charger in RFID pairing mode. Any RFID token read by the charger will be reported on dedicated observation. [undefined]
#define COMMAND_SET_RFIDPAIRING_MODE_ARG_TIMEOUT_SEC 1 //TimeoutSec [Integer]
#define COMMAND_SIMULATE_DISCONNECT  90 // Simulate cable disconnection [undefined]
#define COMMAND_SIMULATE_DISCONNECT_ARG_DURATION_SEC 1 //DurationSec [Integer]
#define COMMAND_DEBUG_OTA_RESTORE_SESSION  91 // Sets a flag telling OTA to restore manifest and patch file index information. Use this to retry OTA without dowloading the file again [undefined]
#define COMMAND_DEBUG_OTA_RESTORE_SESSION_ARG_RESTORE_SESSION 1 //RestoreSession [Boolean]
#define COMMAND_SIMULATE_SUPPLY_ERROR  92 // Charger will output EVSE state F to signal supply error to car. [undefined]
#define COMMAND_SIMULATE_SUPPLY_ERROR_ARG_DURATION_SEC 1 //DurationSec [Integer]
#define COMMAND_SET_LISTEN_TO_CONTROL_PULSE  56 // True = charger needs control pulse to consider itself online [undefined]
#define COMMAND_SET_LISTEN_TO_CONTROL_PULSE_ARG_LISTEN_TO_CONTROL_PULSE 1 //ListenToControlPulse [Boolean]
#endif
*/
const easeeIds = {
  //config
  31: ".config.isEnabled",
  36: ".config.wiFiSSID",
  38: ".config.phaseMode",
  40: ".config.ledStripBrightness",
  44: ".config.smartButtonEnabled",
  48: ".config.dynamicChargerCurrent",
  111: ".config.dynamicCircuitCurrentP1",
  112: ".config.dynamicCircuitCurrentP2",
  113: ".config.dynamicCircuitCurrentP3",
  //Status
  46: ".status.ledMode",
  68: ".status.wiFiAPEnabled",
  82: ".status.chargerFirmware",
  96: ".status.reasonForNoCurrent",
  102: ".status.smartCharging",
  103: ".status.cableLocked",
  109: ".status.chargerOpMode",
  110: ".status.outputCurrent",
  120: ".status.totalPower",
  122: ".status.energyPerHour",
  124: ".status.lifetimeEnergy",
  132: ".status.wiFiRSSI",
  150: ".status.TempMax",
  //xx: ".status.voltage",
  //xx: ".status.isOnline",
  182: ".status.inCurrentT2",
  183: ".status.inCurrentT3",
  184: ".status.inCurrentT4",
  185: ".status.inCurrentT5",
  190: ".status.inVoltageT1T2",
  191: ".status.inVoltageT1T3",
  192: ".status.inVoltageT1T4",
  193: ".status.inVoltageT1T5",
  194: ".status.inVoltageT2T3",
  195: ".status.inVoltageT2T4",
  196: ".status.inVoltageT2T5",
  197: ".status.inVoltageT3T4",
  198: ".status.inVoltageT3T5",
  199: ".status.inVoltageT4T5",
};
Object.freeze(easeeIds);
module.exports = {
  getNameByEnum: function (id) {
    return easeeIds[id];
    //return "Not Found"
  },
  getValue: function () {
    // whatever
  },
};
